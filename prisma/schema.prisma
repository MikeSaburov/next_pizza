generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String   @unique
    password String
    role     UserRole

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Product {
    id          Int           @id @default(autoincrement())
    name        String
    imageUrl    String
    category    Category      @relation(fields: [categoryId], references: [id])
    categoryId  Int
    createdAt   DateTime      @default(now())
    updateAt    DateTime      @updatedAt
    ingredients Ingredient[]
    items       ProductItem[]
}

model Ingredient {
    id       Int    @id @default(autoincrement())
    name     String @unique
    price    Int
    imageUrl String

    products Product[]
    cartItem CartItem[]

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

// Варианты продукта (маленькая, большая, средняя пицца и т.д.)
model ProductItem {
    id        Int     @id @default(autoincrement())
    price     Int
    size      Int? //опциональное поле
    pizzaType Int? //опциональное поле
    product   Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime   @default(now())
    updateAt  DateTime   @updatedAt
    cartItems CartItem[]
}

// Модель корзины
model Cart {
    id          Int    @id @default(autoincrement())
    user        User?  @relation(fields: [userId], references: [id])
    userId      Int    @unique
    totalAmount Int    @default(0)
    token       String

    createdAt DateTime   @default(now())
    updateAt  DateTime   @updatedAt
    items     CartItem[]
}

// Продукт в корзине
model CartItem {
    id Int @id @default(autoincrement())

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int //количество едениц продукта

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

// Заказ
model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    totalAmount Int
    status      OrderStatus
    paymentid   String? //идентификатор оплаты
    token       String

    items Json //список продуктов

    // Информация о том кому заказаны продукты
    fullName String
    address  String
    email    String
    phone    String
    comment  String

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

// Код верификации
model VerificationCode {
    id     Int  @id @default(autoincrement())
    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCLLED
}

enum UserRole {
    USER
    ADMIN
}
